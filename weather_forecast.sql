-- PL/SQL Project: Weather Forecast Management System

-- 1. Create Tables for the Weather Forecast System
CREATE TABLE Locations (
    Location_ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    City VARCHAR2(100) NOT NULL,
    State VARCHAR2(100),
    Country VARCHAR2(100),
    PRIMARY KEY (Location_ID)
);

CREATE TABLE Weather_Data (
    Weather_ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    Location_ID NUMBER NOT NULL,
    Forecast_Date DATE NOT NULL,
    Temperature NUMBER(5,2),
    Humidity NUMBER(5,2),
    Wind_Speed NUMBER(5,2),
    Weather_Condition VARCHAR2(100),
    PRIMARY KEY (Weather_ID),
    FOREIGN KEY (Location_ID) REFERENCES Locations(Location_ID) ON DELETE CASCADE
);

-- 2. Insert Sample Data
INSERT INTO Locations (City, State, Country) VALUES ('Mumbai', 'Maharashtra', 'India');
INSERT INTO Locations (City, State, Country) VALUES ('New York', 'New York', 'USA');
INSERT INTO Locations (City, State, Country) VALUES ('Tokyo', NULL, 'Japan');

INSERT INTO Weather_Data (Location_ID, Forecast_Date, Temperature, Humidity, Wind_Speed, Weather_Condition)
VALUES (1, TO_DATE('2025-01-07', 'YYYY-MM-DD'), 28.5, 75, 12.3, 'Sunny');
INSERT INTO Weather_Data (Location_ID, Forecast_Date, Temperature, Humidity, Wind_Speed, Weather_Condition)
VALUES (2, TO_DATE('2025-01-07', 'YYYY-MM-DD'), -2.3, 60, 8.5, 'Snowy');
INSERT INTO Weather_Data (Location_ID, Forecast_Date, Temperature, Humidity, Wind_Speed, Weather_Condition)
VALUES (3, TO_DATE('2025-01-07', 'YYYY-MM-DD'), 5.8, 65, 10.1, 'Cloudy');

-- 3. PL/SQL Procedure to Add Weather Data
CREATE OR REPLACE PROCEDURE Add_Weather_Data (
    p_Location_ID IN NUMBER,
    p_Forecast_Date IN DATE,
    p_Temperature IN NUMBER,
    p_Humidity IN NUMBER,
    p_Wind_Speed IN NUMBER,
    p_Weather_Condition IN VARCHAR2
) AS
BEGIN
    INSERT INTO Weather_Data (Location_ID, Forecast_Date, Temperature, Humidity, Wind_Speed, Weather_Condition)
    VALUES (p_Location_ID, p_Forecast_Date, p_Temperature, p_Humidity, p_Wind_Speed, p_Weather_Condition);
    COMMIT;
END;
/

-- 4. PL/SQL Function to Get Average Temperature for a City
CREATE OR REPLACE FUNCTION Get_Average_Temperature (
    p_City IN VARCHAR2
) RETURN NUMBER AS
    v_Average_Temp NUMBER;
BEGIN
    SELECT AVG(w.Temperature)
    INTO v_Average_Temp
    FROM Weather_Data w
    JOIN Locations l ON w.Location_ID = l.Location_ID
    WHERE l.City = p_City;

    RETURN v_Average_Temp;
END;
/

-- 5. PL/SQL Trigger to Log Weather Data Changes
CREATE TABLE Weather_Log (
    Log_ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    Weather_ID NUMBER,
    Operation VARCHAR2(10),
    Log_Date TIMESTAMP DEFAULT SYSTIMESTAMP,
    PRIMARY KEY (Log_ID)
);

CREATE OR REPLACE TRIGGER Log_Weather_Changes
AFTER INSERT OR UPDATE OR DELETE ON Weather_Data
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO Weather_Log (Weather_ID, Operation)
        VALUES (:NEW.Weather_ID, 'INSERT');
    ELSIF UPDATING THEN
        INSERT INTO Weather_Log (Weather_ID, Operation)
        VALUES (:OLD.Weather_ID, 'UPDATE');
    ELSIF DELETING THEN
        INSERT INTO Weather_Log (Weather_ID, Operation)
        VALUES (:OLD.Weather_ID, 'DELETE');
    END IF;
END;
/

-- 6. Query to Fetch Weather Forecasts for a City
SELECT l.City, w.Forecast_Date, w.Temperature, w.Humidity, w.Wind_Speed, w.Weather_Condition
FROM Weather_Data w
JOIN Locations l ON w.Location_ID = l.Location_ID
WHERE l.City = 'Mumbai';

-- The above script includes table creation, sample data insertion, and essential PL/SQL objects
-- like procedures, functions, and triggers to manage and retrieve weather forecast information.